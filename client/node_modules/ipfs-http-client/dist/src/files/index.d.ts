declare function _exports(config: any): {
    chmod: (path: string, mode: string | number, options?: (import("ipfs-core/src/components/files/chmod").ChmodOptions & import("ipfs-core/src/utils").AbortOptions & import("..").HttpOptions) | undefined) => Promise<void>;
    cp: (...args: [a1: string | import("cids"), options?: (import("ipfs-core/src/components/files/cp").CpOptions & import("..").HttpOptions) | undefined] | [a1: string | import("cids"), a2: string | import("cids"), options?: (import("ipfs-core/src/components/files/cp").CpOptions & import("..").HttpOptions) | undefined] | [a1: string | import("cids"), a2: string | import("cids"), a3: string | import("cids"), options?: (import("ipfs-core/src/components/files/cp").CpOptions & import("..").HttpOptions) | undefined]) => Promise<void>;
    flush: (path: string, options?: (import("ipfs-core/src/utils").AbortOptions & import("..").HttpOptions) | undefined) => Promise<import("cids")>;
    ls: (path: string, options?: (import("ipfs-core/src/utils").AbortOptions & import("..").HttpOptions) | undefined) => AsyncIterable<import("ipfs-core/src/components/files/ls").UnixFSEntry>;
    mkdir: (path: string, options?: (import("ipfs-core/src/components/files/mkdir").MkdirOptions & import("ipfs-core/src/utils").AbortOptions & import("..").HttpOptions) | undefined) => Promise<void>;
    mv: (...args: [a1: string, a2: string, options?: (import("ipfs-core/src/components/files/mv").MvOptions & import("..").HttpOptions) | undefined] | [a1: string, a2: string, a3: string, options?: (import("ipfs-core/src/components/files/mv").MvOptions & import("..").HttpOptions) | undefined]) => Promise<void>;
    read: (path: string | import("cids"), options?: (import("ipfs-core/src/components/files/read").ReadOptions & import("ipfs-core/src/utils").AbortOptions & import("..").HttpOptions) | undefined) => AsyncIterable<Uint8Array>;
    rm: (...args: [a1: string, options?: (import("ipfs-core/src/components/files/rm").RmOptions & import("..").HttpOptions) | undefined] | [a1: string, a2: string, options?: (import("ipfs-core/src/components/files/rm").RmOptions & import("..").HttpOptions) | undefined] | [a1: string, a2: string, a3: string, options?: (import("ipfs-core/src/components/files/rm").RmOptions & import("..").HttpOptions) | undefined]) => Promise<void>;
    stat: (path: string, options?: (import("ipfs-core/src/components/files/stat").StatOptions & import("ipfs-core/src/utils").AbortOptions & import("..").HttpOptions) | undefined) => Promise<import("ipfs-core/src/components/files/stat").Stat>;
    touch: (path: string, options?: (import("ipfs-core/src/components/files/touch").TouchOptions & import("ipfs-core/src/utils").AbortOptions & import("..").HttpOptions) | undefined) => Promise<void>;
    write: (path: string, input: string | Uint8Array | Blob | AsyncIterable<Uint8Array>, options?: (import("ipfs-core/src/components/files/write").WriteOptions & import("ipfs-core/src/utils").AbortOptions & import("..").HttpOptions) | undefined) => Promise<void>;
};
export = _exports;
//# sourceMappingURL=index.d.ts.map